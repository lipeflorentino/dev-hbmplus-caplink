name: Build, Test, Release and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

  build-and-deploy-ecg-api:
    if: ${{ contains(github.event_path, 'packages/ecg-api') }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd packages/ecg-api
          npm install

      - name: Run tests
        run: |
          cd packages/ecg-api
          npm test

      - name: Build artifacts
        run: |
          cd packages/ecg-api
          npm run build

  release-ecg-api:
    runs-on: ubuntu-latest
    needs: build-and-deploy-ecg-api

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Use the version of Node.js you need

      - name: Install dependencies
        run: |
          cd packages/ecg-api
          npm install

      - name: Run release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd packages/ecg-api 
          npx semantic-release

  deploy-ecg-api:
    runs-on: ubuntu-latest
    needs: release-ecg-api

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Serverless Framework
        run: |
          cd packages/ecg-api  
          npm install -g serverless

      - name: Deploy with Serverless
        run: |
          cd packages/ecg-api 
          serverless deploy --stage production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}