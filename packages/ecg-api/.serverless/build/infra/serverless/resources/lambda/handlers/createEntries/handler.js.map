{
  "version": 3,
  "sources": ["../../../../../../../../infra/serverless/resources/lambda/handlers/createEntries/handler.ts", "../../../../../../../../application/dto/createEntriesInput.dto.ts", "../../../../../../../../domain/entities/ECG.entity.ts", "../../../../../../../../application/dto/createEntriesOutput.dto.ts", "../../../../../../../../application/useCase/createEntries/createEntries.useCase.ts", "../../../../../../../../infra/controllers/createEntries/createEntries.controller.ts", "../../../../../../../../infra/repositories/mockdb/mockdb.repository.ts"],
  "sourcesContent": ["import { ControllerResponse, CreateEntriesController } from \"../../../../../controllers/createEntries/createEntries.controller\";\r\nimport { MockDBRepository as ECGRepository } from \"../../../../../repositories/mockdb/mockdb.repository\";\r\n\r\nexport const main = async (event: any, context: any, callback: any): Promise<ControllerResponse> => {\r\n    console.log('entry', { event, context, callback });\r\n    const controller = new CreateEntriesController(new ECGRepository());\r\n\r\n    return controller.handleCreateEntries(event.body.ecgData);\r\n}", "export class CreateEntriesInputDTO {\r\n    id: string;\r\n    milivolts: number;\r\n    interval: number;\r\n\r\n    constructor(id: string, milivolts: number, interval: number) {\r\n        this.id = id;\r\n        this.milivolts = milivolts;\r\n        this.interval = interval;\r\n    }\r\n}", "export class ECG {\r\n    id: string;\r\n    milivolts: number;\r\n    interval: number;\r\n    isRegular: boolean;\r\n    marker: \"on\" | \"off\" | null;\r\n\r\n    constructor(id: string, milivolts: number, interval: number) {\r\n        this.id = id;\r\n        this.milivolts = milivolts;\r\n        this.isRegular = false;\r\n        this.marker = null;\r\n        this.interval = interval;\r\n    }\r\n\r\n    detectIrregularities() {\r\n        console.log(\"Analysing ECG measure...\");\r\n        const x = this.interval;\r\n        const y = -0.06366\r\n            + 0.12613 * Math.cos(Math.PI * x / 500)\r\n            + 0.12258 * Math.cos(Math.PI * x / 250)\r\n            + 0.01593 * Math.sin(Math.PI * x / 500)\r\n            + 0.03147 * Math.sin(Math.PI * x / 250);\r\n\r\n        const lowerBound = y * 0.8;\r\n        const upperBound = y * 1.2;\r\n\r\n        if (this.milivolts >= lowerBound && this.milivolts <= upperBound) {\r\n            console.log(\"This measure is irregular.\");\r\n            this.setIsRegular(false);\r\n        } else {\r\n            this.setIsRegular(true);\r\n        }\r\n    }\r\n\r\n    setIsRegular(value: boolean) {\r\n        this.isRegular = value;\r\n    }\r\n\r\n    setMarker(value: \"on\" | \"off\" | null) {\r\n        this.marker = value;\r\n    }\r\n}", "export class CreateEntriesOutputDTO {\r\n    id: string;\r\n    milivolts: number;\r\n    interval: number;\r\n    isRegular: boolean;\r\n\r\n    constructor(id: string, milivolts: number, interval: number, isRegular: boolean) {\r\n        this.id = id;\r\n        this.milivolts = milivolts;\r\n        this.interval = interval;\r\n        this.isRegular = isRegular;\r\n    }\r\n}", "import { ECG } from \"../../../domain/entities/ECG.entity\";\r\nimport { ECGRepository } from \"../../../domain/repositories/ECGRepository.interface\";\r\nimport { CreateEntriesInputDTO } from \"../../dto/createEntriesInput.dto\";\r\nimport { CreateEntriesOutputDTO } from \"../../dto/createEntriesOutput.dto\";\r\n\r\nexport class CreateEntriesUseCase {\r\n    constructor(private readonly ecgRepository: ECGRepository) {}\r\n\r\n    async execute(input: CreateEntriesInputDTO): Promise<CreateEntriesOutputDTO> {\r\n        const ecg = new ECG(input.id, input.milivolts, input.milivolts);\r\n        // verificar se ecg \u00E9 ou n\u00E3o irregular\r\n        ecg.detectIrregularities();\r\n        // salvar a entrada\r\n        this.ecgRepository.save(ecg);\r\n\r\n        return new CreateEntriesOutputDTO(ecg.id, ecg.milivolts, ecg.interval, ecg.isRegular);\r\n    }\r\n}", "import { CreateEntriesInputDTO } from \"../../../application/dto/createEntriesInput.dto\";\r\nimport { CreateEntriesOutputDTO } from \"../../../application/dto/createEntriesOutput.dto\";\r\nimport { CreateEntriesUseCase } from \"../../../application/useCase/createEntries/createEntries.useCase\";\r\nimport { ECGRepository } from \"../../../domain/repositories/ECGRepository.interface\";\r\n\r\nexport type eventInput = {\r\n    id: string,\r\n    milivolts: number,\r\n    interval: number,\r\n};\r\n\r\nexport type ControllerResponse = {\r\n    status: number,\r\n    data: CreateEntriesOutputDTO,\r\n    message: string;\r\n}\r\n\r\nexport class CreateEntriesController {\r\n    private createEntriesUseCase: CreateEntriesUseCase;\r\n\r\n    constructor(private readonly ecgRepository: ECGRepository) {\r\n        this.createEntriesUseCase = new CreateEntriesUseCase(this.ecgRepository);\r\n    }\r\n\r\n    async handleCreateEntries(input: eventInput): Promise<ControllerResponse> {\r\n        const ecg = await this.createEntriesUseCase.execute(\r\n            new CreateEntriesInputDTO(input.id, input.milivolts, input.interval)\r\n        );\r\n\r\n        return {\r\n            status: 201,\r\n            data: ecg,\r\n            message: 'created succesfully!',\r\n        }\r\n    }\r\n\r\n\r\n}", "import { ECG } from \"../../../domain/entities/ECG.entity\";\r\nimport { ECGRepository } from \"../../../domain/repositories/ECGRepository.interface\";\r\n\r\nexport class MockDBRepository implements ECGRepository {\r\n    async save(ecg: ECG): Promise<void> {\r\n        console.log('salvo com sucesso', { ecg });\r\n    }\r\n\r\n    async getHistory(deviceId: string): Promise<ECG[]> {\r\n        console.log('listando resultados do device', { deviceId })\r\n        const ecg_1 = new ECG({ id: '1', milivolts: 100, interval: 1 });\r\n        return [ecg_1];\r\n    }\r\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,wBAAN,MAA4B;AAAA,EAK/B,YAAY,IAAY,WAAmB,UAAkB;AACzD,SAAK,KAAK;AACV,SAAK,YAAY;AACjB,SAAK,WAAW;AAAA,EACpB;AACJ;;;ACVO,IAAM,MAAN,MAAU;AAAA,EAOb,YAAY,IAAY,WAAmB,UAAkB;AACzD,SAAK,KAAK;AACV,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,uBAAuB;AACnB,YAAQ,IAAI,0BAA0B;AACtC,UAAM,IAAI,KAAK;AACf,UAAM,IAAI,WACJ,UAAU,KAAK,IAAI,KAAK,KAAK,IAAI,GAAG,IACpC,UAAU,KAAK,IAAI,KAAK,KAAK,IAAI,GAAG,IACpC,UAAU,KAAK,IAAI,KAAK,KAAK,IAAI,GAAG,IACpC,UAAU,KAAK,IAAI,KAAK,KAAK,IAAI,GAAG;AAE1C,UAAM,aAAa,IAAI;AACvB,UAAM,aAAa,IAAI;AAEvB,QAAI,KAAK,aAAa,cAAc,KAAK,aAAa,YAAY;AAC9D,cAAQ,IAAI,4BAA4B;AACxC,WAAK,aAAa,KAAK;AAAA,IAC3B,OAAO;AACH,WAAK,aAAa,IAAI;AAAA,IAC1B;AAAA,EACJ;AAAA,EAEA,aAAa,OAAgB;AACzB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,UAAU,OAA4B;AAClC,SAAK,SAAS;AAAA,EAClB;AACJ;;;AC1CO,IAAM,yBAAN,MAA6B;AAAA,EAMhC,YAAY,IAAY,WAAmB,UAAkB,WAAoB;AAC7E,SAAK,KAAK;AACV,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,EACrB;AACJ;;;ACPO,IAAM,uBAAN,MAA2B;AAAA,EAC9B,YAA6B,eAA8B;AAA9B;AAAA,EAA+B;AAAA,EAE5D,MAAM,QAAQ,OAA+D;AACzE,UAAM,MAAM,IAAI,IAAI,MAAM,IAAI,MAAM,WAAW,MAAM,SAAS;AAE9D,QAAI,qBAAqB;AAEzB,SAAK,cAAc,KAAK,GAAG;AAE3B,WAAO,IAAI,uBAAuB,IAAI,IAAI,IAAI,WAAW,IAAI,UAAU,IAAI,SAAS;AAAA,EACxF;AACJ;;;ACAO,IAAM,0BAAN,MAA8B;AAAA,EAGjC,YAA6B,eAA8B;AAA9B;AACzB,SAAK,uBAAuB,IAAI,qBAAqB,KAAK,aAAa;AAAA,EAC3E;AAAA,EAEA,MAAM,oBAAoB,OAAgD;AACtE,UAAM,MAAM,MAAM,KAAK,qBAAqB;AAAA,MACxC,IAAI,sBAAsB,MAAM,IAAI,MAAM,WAAW,MAAM,QAAQ;AAAA,IACvE;AAEA,WAAO;AAAA,MACH,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,EACJ;AAGJ;;;AClCO,IAAM,mBAAN,MAAgD;AAAA,EACnD,MAAM,KAAK,KAAyB;AAChC,YAAQ,IAAI,qBAAqB,EAAE,IAAI,CAAC;AAAA,EAC5C;AAAA,EAEA,MAAM,WAAW,UAAkC;AAC/C,YAAQ,IAAI,iCAAiC,EAAE,SAAS,CAAC;AACzD,UAAM,QAAQ,IAAI,IAAI,EAAE,IAAI,KAAK,WAAW,KAAK,UAAU,EAAE,CAAC;AAC9D,WAAO,CAAC,KAAK;AAAA,EACjB;AACJ;;;ANVO,IAAM,OAAO,OAAO,OAAY,SAAc,aAA+C;AAChG,UAAQ,IAAI,SAAS,EAAE,OAAO,SAAS,SAAS,CAAC;AACjD,QAAM,aAAa,IAAI,wBAAwB,IAAI,iBAAc,CAAC;AAElE,SAAO,WAAW,oBAAoB,MAAM,KAAK,OAAO;AAC5D;",
  "names": []
}
